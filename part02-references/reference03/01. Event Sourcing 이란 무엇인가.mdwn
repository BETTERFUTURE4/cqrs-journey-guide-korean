<div align="center">

#### [목차 바로가기](https://github.com/dhslrl321/cqrs-journey-korean-ver/blob/master/Table%20of%20Contents.mdwn)

</div>

---

# Event Sourcing 이란 무엇인가

ES (Event Sourcing) 과 CQRS (Command Query Responsibility Segration) 는 주로 함께 언급되곤 한다.

ES 가 CQRS 를 의미하지 않고 역시 CQRS 가 ES 를 의미하지는 않지만 각각이 서로 상호보완 관계라는 것을 알게 될 것이다.

이번 챕터에서 이벤트 소싱의 기초가 되는 핵심 개념을 쇅하고 CQRS 패턴과의 잠재적인 관계에 대한 몇가지 지침을 제공한다.

이번 챕터는 다음 챕터인 "CQRS 와 ES Deep Dive" 의 준비운동 격으로 생각해주면 된다.

다음 챕터에서 ES 와 CQRS 에 대해서 더욱 깊게 이야기 나눠볼 것이다.

#### 이벤트 소싱의 이해를 돕기 위해서 Event 라는 것의 특징을 정확히 알고 가는 것이 중요하다

- **Event 는 과거에 일어난 사건이다.**
  - 예를 들면 다음과 같다. "the speaker was booked", "the seat was reserved"
  - 과거 시제를 사용하는 것을 주목하라.
- **Event 는 불변하다**
  - 이벤트는 과거에 일어난 사건이기 떄문에 변경되거나 미완성이어서는 안된다.
  - 이전의 event 를 수정하거나 취소하거나 수정하기 위해서는 보정 이벤트를 발행할 수 있다.
  - 예를 들면 "id 123 reservation was cancelled" 이벤트는 이전의 123 이라는 id 를 가진 reservation 을 취소하는 이벤트를 의미한다
- **Event 는 one-way 메시지다.**
  - event 는 단일 출처 (single source, publisher) 여야 한다.
  - 하지만 수신자 (recipients, subscribers) 는 여럿이 될 수 있다
- **일반적으로 Event 는 해당 이벤트에 포함되는 추가적인 정보를 포함한다.**
- **이벤트 소싱에서 이벤트는 비즈니스를 포함해야 한다.**
  - 이벤트는 그 자체로도 비즈니스 용어로 설명될 수 있는 것이 좋다.

우리가 이번 챕터에서 이야기할 Events 는 애그리거트와 관련이 있다. 

Aggregate, 애그리거트는 DDD 와 관련이 깊은데, 이에 대해서는 [References 01. CQRS in Context](https://github.com/dhslrl321/cqrs-journey-korean-ver/tree/master/part02-references/reference01) 에서 자세한 내용을 확인할 수 있다. 

#### 또한 이벤트와 이벤트 소싱에 관련이 깊은 애그리거트의 두가지 특징을 알아야 한다.

- 애그리거트는 관련있는 entity 에 대해서 일관성을 보장해야 한다. (consistency boundaries)
  - 그러므로 애그리거트의 event 를 이용해서 해당 트랜잭션에 참여하는 다른 애그리거트로 특정 사건이 일어났음을 알릴 수 있다.
- 모든 애그리거트는 유일한 ID 를 가지고 있다. 그러므로 해당 ID 를 통해서 특정 이벤트의 소스였던 애그리거트를 기록할 수 있다.

# Event Sourcing, 이벤트 소싱이란 무엇인가

이벤트 소싱이란 애플리케이션의 현재 상태의 변경 모두를 저장하고 이를 이용하여 애플리케이션의 상태를 유지하는 방법이다.

예를 들어 컨퍼런스 관리 시스템에서는 컨퍼런스의 좌석에 대해서 누군가가 예약을 시도할 때, 다른 사람이 예약하고 있는지 혹은 이미 예약이 완료되었는지에 대한 상태를 계속해서 추적해야 할 필요가 있다.

그래서 시스템은 다음과 같은 두가지 방법을 통해서 전체 예약을 관리할 수 있다.

- **특정 컨퍼런스의 총 예약 수(`total number of bookings`) 를 관리하는 방법이 있다.**
  - 누군가가 예약을 하거나 취소를 한다면 총 예약 수 (`total number of bookings`) 를 계속해서 조정해준다.
  - 특정 컨퍼런스 테이블에 integer 형태로 칼럼을 추가하는 형태를 떠올릴 수 있다.
- **각각 컨퍼런스에 예약하거나 (`booking`) 취소하는 (`cancellation`) 이벤트를 저장하는 방법이 있다.**
  - 현재 총 예약 수를 확인하기 위해서는 관련된 이벤트를 모두 replay 한 뒤 계산을 통해서 확인할 수 있다.

*편의상 첫번쨰 방식을 ORM 을 사용한 방식이라고 하고 두번쨰 방식을 Event Sourcing 을 사용한 방식이라고 부르겠다*

## 두가지 방식 비교하기,  ORM 을 사용한 방식

그림 1을 보면 총 예약 수를 저장하는 첫번째 접근 방식을 보여준다.

1. [*ProcessManager](https://github.com/dhslrl321/cqrs-journey-korean-ver/blob/master/terms/Process%20Manager%20Patterm.mdwn) 나 UI 가 Conference ID 157 로 두 명의 참석자에 대해서 좌석을 예매하라는 command 를 보낸다. 이 command 든 **SeatsAvailability** 애그리거트의 command handler 에 의해서 처리된다.
2. 필요하다면 ORM 을 이용해서 instance 를 생성하고 저장할 수 있다. ORM 은 DB 에서 총 예약 수가 존재하는 conference 를 조회한다.
3. comamnd handler 는 예약을 위해 aggregate 인스턴스를 통해서 business method 를 호출한다.
4. **SeatsAvailability** 애그리거트는 도메인 로직을 수행한다. 이 상황에서는 해당 컨퍼런스에 대해서 새로운 총 예약 수를 다시 계산한다.
5. ORM 은 애그리커트 인스턴스에 대한 정보들을 DB 에 저장한다. ORM 레이어는 Update 연산을 수행하게 된다.

![image](https://user-images.githubusercontent.com/48385288/189571958-32a91499-bbb7-47b4-ad4a-daeefbaccb33.png)

위 그림은 아주 간소화된 process 를 보여준 것이다. 실제로는 ORM Layer 에 의해서 수행되는 mapping 은 훨씬 복잡할 것이다.

당신은 load 하고 save 하는 과정에서 발생하는 consistency, reliability, scalability 등에 대해서 고려해야 한다

## 두가지 방식 비교하기, Event Sourcing 을 사용한 방식

위 그림은 두번째 접근법인 RDBMS 와 ORM 대신 Event Sourcing 을 사용한 방식이다.

> 당신은 Event Store 를 RDBMS 를 사용해서 구현할 수도 있다. 관계형 스키마를 사용하는 것은 첫번째 접근법에서 사용된 ORM 을 사용하는것 보다 훨씬 간단하게 해준다.

아래 나오는 단계가 아래 그림에서 표현되는 Event Sourcing 을 사용한 방법이다.

1단계, 3단계, 4단계는 ORM 을 사용한 방법과 동일하다.

1. [*ProcessManager](https://github.com/dhslrl321/cqrs-journey-korean-ver/blob/master/terms/Process%20Manager%20Patterm.mdwn) 나 UI 가 Conference ID 157 로 두 명의 참석자에 대해서 좌석을 예매하라는 command 를 보낸다. 이 command 든 **SeatsAvailability** 애그리거트의 command handler 에 의해서 처리된다.
2. 애그리거트 인스턴스가 **SeatsAvailability** 애그리거트 157 에 속하는 모든 이벤트를 query 한 결과로 채워진다.
3. comamnd handler 는 예약을 위해 aggregate 인스턴스를 통해서 business method 를 호출한다.
4. **SeatsAvailability** 애그리거트는 도메인 로직을 수행한다. 이 상황에서는 해당 컨퍼런스에 대해서 새로운 총 예약 수를 다시 계산한다. 
5. 시스템은 event store 에 해당 애그리거트에 두개의 새로운 예약을 추가한다.

![image](https://user-images.githubusercontent.com/48385288/189574546-162e5aa4-a3dd-4d65-bb9a-e8c9e4feeec9.png)

두번쨰 접근 방식은 ORM 의 복잡한 관계형 스키마를 대체하기 때문에 훨씬 단순하다.

> 자나: CQRS/ES 패턴은 구현 기술의 변경을 쉽게 해줍니다. 예를 들어서 이벤트 스토어의 프로토타입으로 file-based 기술로 선정했고 이후에 클라우드 서비스로 바꾸는것 처럼 말입니다. 

DB 는 오로지 특정 애그리거트 ID 에 속하는 이벤트만을 조회하고 이벤트를 저장 (appending) 만 하면 된다.

성능 및 확장성과 최적화를 고려해야 하지만, 이러한 최적화가 신뢰성과 일관성에 미치는 영향은 훨씬 이해하기 쉬워야 한다

> 참고로 이벤트의 스냅샷을 사용해서 전체 이벤트 목록을 쿼리하고 Replay 하는 데에 캐싱할 수 있다.

당신은 애그리거트가 저장된 이벤트들을 쿼리하여 현재 상태로 다시 build 할 수 있도록 하는 매커니즘이 있는지 확인해야 한다.

두번쨰 접근 방식으로 얻은 것은 컨퍼런스 예약에 대한 예약 (`booking`) 과 취소 (`cancellation`) 에 대해 발생한 사건들의 기록이다.

따라서 이벤트 스트림이 단일 진실 공급원이 된다. (only source of truth)

이벤트를 쉽게 재생하고 시스템 상태를 임의의 시점으로 복원할 수 있으므로 다른 애그리거트나 엔티티를 만들 필요가 없다.

회계(accounting), 정산(settlement) 같은 일부 영역에서 이벤트 소싱은 이미 잘 적용되어 있다.

accounting 시스템에서는 시스템의 현재 상태를 항상 재구성할 수 있는 개별 트랜잭션을 저장한다.

이벤트 소싱은 특정 도메인에서 유용한 장점을 가져올 수 있다.

---
