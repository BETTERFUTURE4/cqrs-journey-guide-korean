<div align="center">

#### [목차 바로가기](https://github.com/dhslrl321/cqrs-journey-korean-ver/blob/master/Table%20of%20Contents.mdwn)

</div>

---

# Bounded Context 에 대한 설명

주문과 예약(Order, Registration) 바운디드 컨텍스트는 컨퍼런스에 참가하고자 하는 참석자의 예약 프로세스 (booking process) 에 대해서 부분적으로 책임이 있다.

주문과 등록 바운디드 컨텍스트에서 에약자는 컨퍼런스의 좌석을 구매하고 해당 좌석에 참석하는 사람의 이름을 명시할 수 있다. (자세한 내용은 Chapter 5, Preparing for the V1 Release 에서 확인할 수 있다)

이것은 우리의 여정에서 첫번째 정류지가 되었기 떄문에 (this is first stop on our CQRS Journey) 결국 팀은 주문 및 등록에 대한 core 를 구현하기로 결정했다.

registration 프로세스는 참석자 혹은 구매자에게 불편함을 주어서는 안된다.
또한 기업 고객들이 최대한 많은 좌석을 팔 수 있도록 해야 하며 컨퍼런스에서 다양한 유형의 좌석의 유형의 가격을 유연하게 판매할 수 있도록 해야 한다

우리 팀이 처음으로 다루는 바운디드 컨텍스트이기 때문에, 도메인의 기능들을 support 할 수 있는 몇가지의 인프라 컴포넌트들 (infrastructure elements of the system) 을 구현해야 한다.

이러한 컴포넌트들은 command 와 event 에 대한 [\*message bus](https://github.com/dhslrl321/cqrs-journey-korean-ver/blob/master/terms/Message%20Bus.mdwn) 나 [\*aggregate](https://github.com/dhslrl321/cqrs-journey-korean-ver/blob/master/terms/Aggregate.mdwn) 를 위한 영속성 계층 기술들을 포함한다

> 이번 챕터에서 말하는 콘토소 컨퍼런스 관리 시스템은 시스템의 최종 버전이 아니다 (not a final version of system) 여정을 진행하면서 결정되었던 혹은 개발되구 구현된 시스템의 구성요소들이 시간이 지나면서 다른 여정에서 바뀔 수 있다.

추후에 있을 다음 여정에서 이러한 바운디드 컨텍스트에 대한 개선 계획이 있다.

개선 계획 중에는 다음과 같은 것들이 있다

- 대기자 명단에 대한 관리
- 좌석 요청에대 한 대기자 명단 관리
- 기업 고객이 좌석유형에 따른 할인

> 이번 릴리즈에서 대기자 명단은 구현되지 않지만 CQRS 커뮤니티의 멤버들이 이 기능을 포함해서 다른 기능들을 추가하고 있습니다. CQRS Journey 사이트를 통해서 확인하길 바랍니다.

# 이번 장의 작업 정의

이번 장에서는 많은 용어들을 사용할 것이다.

자세한 정의에 대해서는 CQRS Reference 에 있ㄴ쯘 CQRS 와 ES Deep Dive 를 통해서 확인할 수 있다.

### Command

command 는 시스템 내부의 상태를 바꾸는 행위에 대한 요청을 말한다.
command 는 시스템에서 필수적이다

한가지 예로 `MakeSeatResetvation` 라는 command 는 이번 바운디드 컨텍스트에서 사용자가 UI 를 통해서 요청을 보내거나 Process Manager 가 어떠한 행동을 통해서 process 를 수행하도록 요청할 때 발생하곤 한다

### Event

`OrderConfirmed` 라는 이벤트 처럼 Event 는 시스템에서 과거에 발생한 어떠한 사건을 의미한다. 보통 어떤 Command 의 결과에 의해서 발생되며 domain model 안의 [\*aggregate](https://github.com/dhslrl321/cqrs-journey-korean-ver/blob/master/terms/Aggregate.mdwn) 에서 이벤트를 발생시킨다.

해당 이벤트에 관심있어 하는 여러 구독자들 (subscriber) 에 의해서 해당 이벤트가 handle 될 수 있으며 Aggregate 는 event bus 를 통해서 이벤드를 publish 한다.

이벤트 핸들러는 특정 타입의 이벤트가 필요한 subscriber 에게 전달하는 역할을 수행한다.

이번 바운디드 컨텍스트에서 유일한 subscriber 는 Process Manager 이다.

### Process Manager

이번 바운디드 컨텍스트에서 프로세스 매니저는 aggregate 의 동작을 지정하는 클래스이다.

프로세스 매니저는 애그리거트가 발생시킨 이벤트를 구독하고 간단한 규칙들 (simple set of rule to determine which command or commands to send) 에 따라서 보낼 명령들을 결정한다.

Process Manager 는 어떠한 비즈니스 로직도 갖지 않는다.
단순하게 다음에 보낼 이벤트를 결정할 로직만 갖는다

우리의 Process Manager 는 Gregor Hohpe 와 Bobby Woolf 의 기업 통합 패턴이라는
책의 312쪽에서 321 쪽에서 정의한 [\*Process Manager Pattern](#) 의 구현이다

---
