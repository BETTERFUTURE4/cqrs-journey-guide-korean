<div align="center">

#### [목차 바로가기](https://github.com/dhslrl321/cqrs-journey-korean-ver/blob/master/Table%20of%20Contents.mdwn)

</div>

---

# Inside the Write Model

## Aggregate

아래의 코드는 Order 애그리거트의 도메인 코드를 나타낸 것이다

```java
@Getter
public class Order implements AbstractAggregateRoot, EventPublisher {

    private Long id;
    private Long conferenceId;
    private Long userId;
    private List<Event> events;
    private List<TicketOrderLine> lines;
    private OrderState state;

    public void markAsBooked() {
        if (!CREATED.equals(state)) {
            throw new IllegalStateException();
        }
        state = BOOKED;
    }

    public void reject() {
        if (!CREATED.equals(state)) {
            throw new IllegalStateException();
        }
        state = REJECTED;
    }
}
```

> 번역자 : 아래의 내용은 `C#` 에 대한 내용입니다. Java 로 구현한 현재 CQRS Journey 버전에서는 이해를 방해할 수 있기 때문에 번역에서는 제외하였습니다. 대신 원문을 추가하였으니 참고하시길 바랍니다.

```C#
public class Order :IAggregateRoot, IEventPublisher {
    public static class States {
        public const
        int Created = 0;
        public const
        int Booked = 1;
        public const
        int Rejected = 2;
        public const
        int Confirmed = 3;
    }

    private List<IEvent> events = new List<IEvent>(); ...
    public Guid Id {
        get;
        private set ;
    }
    public Guid UserId {
        get;
        private set ;
    }
    public Guid ConferenceId {
        get;
        private set ;
    }
    public virtual ObservableCollection<TicketOrderLine > Lines {
        get;
        private set ;
    } public int State {
        get;
        private set ;
    }
    public IEnumerable<Ievent> Events {
        get {
            return this.events;
        }
    }
    public void MarkAsBooked () {
        if (this.State != States.Created) {
            throw new InvalidOperationException();
        }
        this.State = States.Booked;
    }
    public void Reject () {
        if (this.State != States.Created) {
            throw new InvalidOperationException();
        }
        this.State = States.Rejected;
    }
}
```

Notice how the properties of the class are not virtual. In the original version of this class, the proper- ties Id, UserId, ConferenceId, and State were all marked as virtual. The following conversation be- tween two developers explores this decision.

#### Developer 1

I’m really convinced you should not make the property virtual, except if required by the object-relational mapping (ORM) layer. If this is just for testing purposes, entities and ag- gregate roots should never be tested using mocking. If you need mocking to test your entities, this is a clear smell that something is wrong in the design.

#### Developer 2

I prefer to be open and extensible by default. You never know what needs may arise in the future, and making things virtual is hardly a cost. This is certainly controversial and a bit non-standard in .NET, but I think it’s OK. We may only need virtuals on lazy-loaded collec- tions.

#### Developer 1

Since CQRS usually makes the need for lazy load vanish, you should not need it either. This leads to even simpler code.

#### Developer 2

CQRS does not dictate usage of event sourcing (ES), so if you’re using an aggre- gate root that contains an object graph, you’d need that anyway, right?

#### Developer 1

This is not about ES, it’s about DDD. When your aggregate boundaries are right, you don’t need delay loading.

#### Developer 2

To be clear, the aggregate boundary is here to group things that should change to- gether for reasons of consistency. A lazy load would indicate that things that have been grouped together don’t really need this grouping.

#### Developer 1

I agree. I have found that lazy-loading in the command side means I have it mod- eled wrong. If I don’t need the value in the command side, then it shouldn’t be there. In addition, I dislike virtuals unless they have an intended purpose (or some artificial requirement from an object-relational mapping (ORM) tool). In my opinion, it violates the Open-Closed principle: you have opened yourself up for modification in a variety of ways that may or may not be intended and where the repercussions might not be immediately discoverable, if at all.

#### Developer 2

Our Order aggregate in the model has a list of Order Items. Surely we don’t need to load the lines to mark it as Booked? Do we have it modeled wrong there?

#### Developer 1

Is the list of Order Items that long? If it is, the modeling may be wrong because you don’t necessarily need transactionality at that level. Often, doing a late round trip to get and updated Order Items can be more costly that loading them up front: you should evaluate the usual size of the collection and do some performance measurement. Make it simple first, opti- mize if needed.

—Thanks to Jérémie Chassaing and Craig Wilson

# Aggregates and Process Managers

아래의 그림은 write side 의 엔티티 모델을 보여준다.

<img width="1321" alt="image" src="https://user-images.githubusercontent.com/48385288/185792003-d1eef6c5-b697-4791-bc24-74595449804e.png">

아래에는 **Order** 와 **SeatsAvailability**, 두개의 애그리거트가 존재하는데 각각은 다양한 엔티티 타입을 포함한다.

또한 이 둘 사이와 통신하기 위한 **RegistrationProcessManager** 클래스가 존재한다.

<img width="1342" alt="image" src="https://user-images.githubusercontent.com/48385288/185792023-80327239-1f04-4a0e-8ba8-35211086eb38.png">

위의 표는 ProcessManager 의 현재 상태 (current state of process manager) 에서 Process manager 로 message 가 들어오면 어떻게 동작하지는지 보여준다.

UI 에서 `RegisterToConference` 커맨드를 보낸다면 등록 (registering) 프로세스가 시작된다.

그렇다면 infrastructure 가 **Order** 애그리거트로 해당 command 를 전달하게 된다.

comamnd 에 대한 결과는 시스템이 새로운 **Order** 인스턴스를 만들고 OrderPlaced 라는 이벤트를 일으키는 것이다.

아래의 코드 샘플은 Order 클래스의 생성자에서 위의 과정을 하는 코드를 일부 발췌한 것이다.

> 번역본에서는 GUID 를 식별자로 이용하였지만 해당 코드샘플에서는 외부에서 id 를 주입받는 형태로 구성하였습니다.

```java
public Order(Long id, Long conferenceId, Long userId, List<OrderItem> lines) {
        this.id = id;
        this.userId = userId;
        this.conferenceId = conferenceId;
        this.lines = lines;

        OrderPlaced event = OrderPlaced.of(
                id,
                conferenceId,
                userId,
                lines.stream()
                        .map(item -> SeatOrderPlaced.of(item.getSeatTypeId(), item.getQuantity()))
                        .collect(Collectors.toList()));

        this.events.add(event);
    }
```

시스템은 새로운 Order 를 관리하기 위해 RegistrationProcessManager 인스턴스를 생성한다.

아래의 코드 샘플은 Process Manager 에서 RegistrationProcessManager 클래스가 어떻게 이벤트를 handling 하는지를 보여준다

---
